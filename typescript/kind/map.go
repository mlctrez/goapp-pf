package kind

func (k Kind) StringValue() string {
	switch k {	case Unknown:
		return "Unknown"
	case EndOfFileToken:
		return "EndOfFileToken"
	case SingleLineCommentTrivia:
		return "SingleLineCommentTrivia"
	case MultiLineCommentTrivia:
		return "MultiLineCommentTrivia"
	case NewLineTrivia:
		return "NewLineTrivia"
	case WhitespaceTrivia:
		return "WhitespaceTrivia"
	case ShebangTrivia:
		return "ShebangTrivia"
	case ConflictMarkerTrivia:
		return "ConflictMarkerTrivia"
	case NumericLiteral:
		return "NumericLiteral"
	case BigIntLiteral:
		return "BigIntLiteral"
	case StringLiteral:
		return "StringLiteral"
	case JsxText:
		return "JsxText"
	case JsxTextAllWhiteSpaces:
		return "JsxTextAllWhiteSpaces"
	case RegularExpressionLiteral:
		return "RegularExpressionLiteral"
	case NoSubstitutionTemplateLiteral:
		return "NoSubstitutionTemplateLiteral"
	case TemplateHead:
		return "TemplateHead"
	case TemplateMiddle:
		return "TemplateMiddle"
	case TemplateTail:
		return "TemplateTail"
	case OpenBraceToken:
		return "OpenBraceToken"
	case CloseBraceToken:
		return "CloseBraceToken"
	case OpenParenToken:
		return "OpenParenToken"
	case CloseParenToken:
		return "CloseParenToken"
	case OpenBracketToken:
		return "OpenBracketToken"
	case CloseBracketToken:
		return "CloseBracketToken"
	case DotToken:
		return "DotToken"
	case DotDotDotToken:
		return "DotDotDotToken"
	case SemicolonToken:
		return "SemicolonToken"
	case CommaToken:
		return "CommaToken"
	case QuestionDotToken:
		return "QuestionDotToken"
	case LessThanToken:
		return "LessThanToken"
	case LessThanSlashToken:
		return "LessThanSlashToken"
	case GreaterThanToken:
		return "GreaterThanToken"
	case LessThanEqualsToken:
		return "LessThanEqualsToken"
	case GreaterThanEqualsToken:
		return "GreaterThanEqualsToken"
	case EqualsEqualsToken:
		return "EqualsEqualsToken"
	case ExclamationEqualsToken:
		return "ExclamationEqualsToken"
	case EqualsEqualsEqualsToken:
		return "EqualsEqualsEqualsToken"
	case ExclamationEqualsEqualsToken:
		return "ExclamationEqualsEqualsToken"
	case EqualsGreaterThanToken:
		return "EqualsGreaterThanToken"
	case PlusToken:
		return "PlusToken"
	case MinusToken:
		return "MinusToken"
	case AsteriskToken:
		return "AsteriskToken"
	case AsteriskAsteriskToken:
		return "AsteriskAsteriskToken"
	case SlashToken:
		return "SlashToken"
	case PercentToken:
		return "PercentToken"
	case PlusPlusToken:
		return "PlusPlusToken"
	case MinusMinusToken:
		return "MinusMinusToken"
	case LessThanLessThanToken:
		return "LessThanLessThanToken"
	case GreaterThanGreaterThanToken:
		return "GreaterThanGreaterThanToken"
	case GreaterThanGreaterThanGreaterThanToken:
		return "GreaterThanGreaterThanGreaterThanToken"
	case AmpersandToken:
		return "AmpersandToken"
	case BarToken:
		return "BarToken"
	case CaretToken:
		return "CaretToken"
	case ExclamationToken:
		return "ExclamationToken"
	case TildeToken:
		return "TildeToken"
	case AmpersandAmpersandToken:
		return "AmpersandAmpersandToken"
	case BarBarToken:
		return "BarBarToken"
	case QuestionToken:
		return "QuestionToken"
	case ColonToken:
		return "ColonToken"
	case AtToken:
		return "AtToken"
	case QuestionQuestionToken:
		return "QuestionQuestionToken"
	case BacktickToken:
		return "BacktickToken"
	case HashToken:
		return "HashToken"
	case EqualsToken:
		return "EqualsToken"
	case PlusEqualsToken:
		return "PlusEqualsToken"
	case MinusEqualsToken:
		return "MinusEqualsToken"
	case AsteriskEqualsToken:
		return "AsteriskEqualsToken"
	case AsteriskAsteriskEqualsToken:
		return "AsteriskAsteriskEqualsToken"
	case SlashEqualsToken:
		return "SlashEqualsToken"
	case PercentEqualsToken:
		return "PercentEqualsToken"
	case LessThanLessThanEqualsToken:
		return "LessThanLessThanEqualsToken"
	case GreaterThanGreaterThanEqualsToken:
		return "GreaterThanGreaterThanEqualsToken"
	case GreaterThanGreaterThanGreaterThanEqualsToken:
		return "GreaterThanGreaterThanGreaterThanEqualsToken"
	case AmpersandEqualsToken:
		return "AmpersandEqualsToken"
	case BarEqualsToken:
		return "BarEqualsToken"
	case BarBarEqualsToken:
		return "BarBarEqualsToken"
	case AmpersandAmpersandEqualsToken:
		return "AmpersandAmpersandEqualsToken"
	case QuestionQuestionEqualsToken:
		return "QuestionQuestionEqualsToken"
	case CaretEqualsToken:
		return "CaretEqualsToken"
	case Identifier:
		return "Identifier"
	case PrivateIdentifier:
		return "PrivateIdentifier"
	case BreakKeyword:
		return "BreakKeyword"
	case CaseKeyword:
		return "CaseKeyword"
	case CatchKeyword:
		return "CatchKeyword"
	case ClassKeyword:
		return "ClassKeyword"
	case ConstKeyword:
		return "ConstKeyword"
	case ContinueKeyword:
		return "ContinueKeyword"
	case DebuggerKeyword:
		return "DebuggerKeyword"
	case DefaultKeyword:
		return "DefaultKeyword"
	case DeleteKeyword:
		return "DeleteKeyword"
	case DoKeyword:
		return "DoKeyword"
	case ElseKeyword:
		return "ElseKeyword"
	case EnumKeyword:
		return "EnumKeyword"
	case ExportKeyword:
		return "ExportKeyword"
	case ExtendsKeyword:
		return "ExtendsKeyword"
	case FalseKeyword:
		return "FalseKeyword"
	case FinallyKeyword:
		return "FinallyKeyword"
	case ForKeyword:
		return "ForKeyword"
	case FunctionKeyword:
		return "FunctionKeyword"
	case IfKeyword:
		return "IfKeyword"
	case ImportKeyword:
		return "ImportKeyword"
	case InKeyword:
		return "InKeyword"
	case InstanceOfKeyword:
		return "InstanceOfKeyword"
	case NewKeyword:
		return "NewKeyword"
	case NullKeyword:
		return "NullKeyword"
	case ReturnKeyword:
		return "ReturnKeyword"
	case SuperKeyword:
		return "SuperKeyword"
	case SwitchKeyword:
		return "SwitchKeyword"
	case ThisKeyword:
		return "ThisKeyword"
	case ThrowKeyword:
		return "ThrowKeyword"
	case TrueKeyword:
		return "TrueKeyword"
	case TryKeyword:
		return "TryKeyword"
	case TypeOfKeyword:
		return "TypeOfKeyword"
	case VarKeyword:
		return "VarKeyword"
	case VoidKeyword:
		return "VoidKeyword"
	case WhileKeyword:
		return "WhileKeyword"
	case WithKeyword:
		return "WithKeyword"
	case ImplementsKeyword:
		return "ImplementsKeyword"
	case InterfaceKeyword:
		return "InterfaceKeyword"
	case LetKeyword:
		return "LetKeyword"
	case PackageKeyword:
		return "PackageKeyword"
	case PrivateKeyword:
		return "PrivateKeyword"
	case ProtectedKeyword:
		return "ProtectedKeyword"
	case PublicKeyword:
		return "PublicKeyword"
	case StaticKeyword:
		return "StaticKeyword"
	case YieldKeyword:
		return "YieldKeyword"
	case AbstractKeyword:
		return "AbstractKeyword"
	case AsKeyword:
		return "AsKeyword"
	case AssertsKeyword:
		return "AssertsKeyword"
	case AssertKeyword:
		return "AssertKeyword"
	case AnyKeyword:
		return "AnyKeyword"
	case AsyncKeyword:
		return "AsyncKeyword"
	case AwaitKeyword:
		return "AwaitKeyword"
	case BooleanKeyword:
		return "BooleanKeyword"
	case ConstructorKeyword:
		return "ConstructorKeyword"
	case DeclareKeyword:
		return "DeclareKeyword"
	case GetKeyword:
		return "GetKeyword"
	case InferKeyword:
		return "InferKeyword"
	case IntrinsicKeyword:
		return "IntrinsicKeyword"
	case IsKeyword:
		return "IsKeyword"
	case KeyOfKeyword:
		return "KeyOfKeyword"
	case ModuleKeyword:
		return "ModuleKeyword"
	case NamespaceKeyword:
		return "NamespaceKeyword"
	case NeverKeyword:
		return "NeverKeyword"
	case ReadonlyKeyword:
		return "ReadonlyKeyword"
	case RequireKeyword:
		return "RequireKeyword"
	case NumberKeyword:
		return "NumberKeyword"
	case ObjectKeyword:
		return "ObjectKeyword"
	case SetKeyword:
		return "SetKeyword"
	case StringKeyword:
		return "StringKeyword"
	case SymbolKeyword:
		return "SymbolKeyword"
	case TypeKeyword:
		return "TypeKeyword"
	case UndefinedKeyword:
		return "UndefinedKeyword"
	case UniqueKeyword:
		return "UniqueKeyword"
	case UnknownKeyword:
		return "UnknownKeyword"
	case FromKeyword:
		return "FromKeyword"
	case GlobalKeyword:
		return "GlobalKeyword"
	case BigIntKeyword:
		return "BigIntKeyword"
	case OverrideKeyword:
		return "OverrideKeyword"
	case OfKeyword:
		return "OfKeyword"
	case QualifiedName:
		return "QualifiedName"
	case ComputedPropertyName:
		return "ComputedPropertyName"
	case TypeParameter:
		return "TypeParameter"
	case Parameter:
		return "Parameter"
	case Decorator:
		return "Decorator"
	case PropertySignature:
		return "PropertySignature"
	case PropertyDeclaration:
		return "PropertyDeclaration"
	case MethodSignature:
		return "MethodSignature"
	case MethodDeclaration:
		return "MethodDeclaration"
	case ClassStaticBlockDeclaration:
		return "ClassStaticBlockDeclaration"
	case Constructor:
		return "Constructor"
	case GetAccessor:
		return "GetAccessor"
	case SetAccessor:
		return "SetAccessor"
	case CallSignature:
		return "CallSignature"
	case ConstructSignature:
		return "ConstructSignature"
	case IndexSignature:
		return "IndexSignature"
	case TypePredicate:
		return "TypePredicate"
	case TypeReference:
		return "TypeReference"
	case FunctionType:
		return "FunctionType"
	case ConstructorType:
		return "ConstructorType"
	case TypeQuery:
		return "TypeQuery"
	case TypeLiteral:
		return "TypeLiteral"
	case ArrayType:
		return "ArrayType"
	case TupleType:
		return "TupleType"
	case OptionalType:
		return "OptionalType"
	case RestType:
		return "RestType"
	case UnionType:
		return "UnionType"
	case IntersectionType:
		return "IntersectionType"
	case ConditionalType:
		return "ConditionalType"
	case InferType:
		return "InferType"
	case ParenthesizedType:
		return "ParenthesizedType"
	case ThisType:
		return "ThisType"
	case TypeOperator:
		return "TypeOperator"
	case IndexedAccessType:
		return "IndexedAccessType"
	case MappedType:
		return "MappedType"
	case LiteralType:
		return "LiteralType"
	case NamedTupleMember:
		return "NamedTupleMember"
	case TemplateLiteralType:
		return "TemplateLiteralType"
	case TemplateLiteralTypeSpan:
		return "TemplateLiteralTypeSpan"
	case ImportType:
		return "ImportType"
	case ObjectBindingPattern:
		return "ObjectBindingPattern"
	case ArrayBindingPattern:
		return "ArrayBindingPattern"
	case BindingElement:
		return "BindingElement"
	case ArrayLiteralExpression:
		return "ArrayLiteralExpression"
	case ObjectLiteralExpression:
		return "ObjectLiteralExpression"
	case PropertyAccessExpression:
		return "PropertyAccessExpression"
	case ElementAccessExpression:
		return "ElementAccessExpression"
	case CallExpression:
		return "CallExpression"
	case NewExpression:
		return "NewExpression"
	case TaggedTemplateExpression:
		return "TaggedTemplateExpression"
	case TypeAssertionExpression:
		return "TypeAssertionExpression"
	case ParenthesizedExpression:
		return "ParenthesizedExpression"
	case FunctionExpression:
		return "FunctionExpression"
	case ArrowFunction:
		return "ArrowFunction"
	case DeleteExpression:
		return "DeleteExpression"
	case TypeOfExpression:
		return "TypeOfExpression"
	case VoidExpression:
		return "VoidExpression"
	case AwaitExpression:
		return "AwaitExpression"
	case PrefixUnaryExpression:
		return "PrefixUnaryExpression"
	case PostfixUnaryExpression:
		return "PostfixUnaryExpression"
	case BinaryExpression:
		return "BinaryExpression"
	case ConditionalExpression:
		return "ConditionalExpression"
	case TemplateExpression:
		return "TemplateExpression"
	case YieldExpression:
		return "YieldExpression"
	case SpreadElement:
		return "SpreadElement"
	case ClassExpression:
		return "ClassExpression"
	case OmittedExpression:
		return "OmittedExpression"
	case ExpressionWithTypeArguments:
		return "ExpressionWithTypeArguments"
	case AsExpression:
		return "AsExpression"
	case NonNullExpression:
		return "NonNullExpression"
	case MetaProperty:
		return "MetaProperty"
	case SyntheticExpression:
		return "SyntheticExpression"
	case TemplateSpan:
		return "TemplateSpan"
	case SemicolonClassElement:
		return "SemicolonClassElement"
	case Block:
		return "Block"
	case EmptyStatement:
		return "EmptyStatement"
	case VariableStatement:
		return "VariableStatement"
	case ExpressionStatement:
		return "ExpressionStatement"
	case IfStatement:
		return "IfStatement"
	case DoStatement:
		return "DoStatement"
	case WhileStatement:
		return "WhileStatement"
	case ForStatement:
		return "ForStatement"
	case ForInStatement:
		return "ForInStatement"
	case ForOfStatement:
		return "ForOfStatement"
	case ContinueStatement:
		return "ContinueStatement"
	case BreakStatement:
		return "BreakStatement"
	case ReturnStatement:
		return "ReturnStatement"
	case WithStatement:
		return "WithStatement"
	case SwitchStatement:
		return "SwitchStatement"
	case LabeledStatement:
		return "LabeledStatement"
	case ThrowStatement:
		return "ThrowStatement"
	case TryStatement:
		return "TryStatement"
	case DebuggerStatement:
		return "DebuggerStatement"
	case VariableDeclaration:
		return "VariableDeclaration"
	case VariableDeclarationList:
		return "VariableDeclarationList"
	case FunctionDeclaration:
		return "FunctionDeclaration"
	case ClassDeclaration:
		return "ClassDeclaration"
	case InterfaceDeclaration:
		return "InterfaceDeclaration"
	case TypeAliasDeclaration:
		return "TypeAliasDeclaration"
	case EnumDeclaration:
		return "EnumDeclaration"
	case ModuleDeclaration:
		return "ModuleDeclaration"
	case ModuleBlock:
		return "ModuleBlock"
	case CaseBlock:
		return "CaseBlock"
	case NamespaceExportDeclaration:
		return "NamespaceExportDeclaration"
	case ImportEqualsDeclaration:
		return "ImportEqualsDeclaration"
	case ImportDeclaration:
		return "ImportDeclaration"
	case ImportClause:
		return "ImportClause"
	case NamespaceImport:
		return "NamespaceImport"
	case NamedImports:
		return "NamedImports"
	case ImportSpecifier:
		return "ImportSpecifier"
	case ExportAssignment:
		return "ExportAssignment"
	case ExportDeclaration:
		return "ExportDeclaration"
	case NamedExports:
		return "NamedExports"
	case NamespaceExport:
		return "NamespaceExport"
	case ExportSpecifier:
		return "ExportSpecifier"
	case MissingDeclaration:
		return "MissingDeclaration"
	case ExternalModuleReference:
		return "ExternalModuleReference"
	case JsxElement:
		return "JsxElement"
	case JsxSelfClosingElement:
		return "JsxSelfClosingElement"
	case JsxOpeningElement:
		return "JsxOpeningElement"
	case JsxClosingElement:
		return "JsxClosingElement"
	case JsxFragment:
		return "JsxFragment"
	case JsxOpeningFragment:
		return "JsxOpeningFragment"
	case JsxClosingFragment:
		return "JsxClosingFragment"
	case JsxAttribute:
		return "JsxAttribute"
	case JsxAttributes:
		return "JsxAttributes"
	case JsxSpreadAttribute:
		return "JsxSpreadAttribute"
	case JsxExpression:
		return "JsxExpression"
	case CaseClause:
		return "CaseClause"
	case DefaultClause:
		return "DefaultClause"
	case HeritageClause:
		return "HeritageClause"
	case CatchClause:
		return "CatchClause"
	case AssertClause:
		return "AssertClause"
	case AssertEntry:
		return "AssertEntry"
	case PropertyAssignment:
		return "PropertyAssignment"
	case ShorthandPropertyAssignment:
		return "ShorthandPropertyAssignment"
	case SpreadAssignment:
		return "SpreadAssignment"
	case EnumMember:
		return "EnumMember"
	case UnparsedPrologue:
		return "UnparsedPrologue"
	case UnparsedPrepend:
		return "UnparsedPrepend"
	case UnparsedText:
		return "UnparsedText"
	case UnparsedInternalText:
		return "UnparsedInternalText"
	case UnparsedSyntheticReference:
		return "UnparsedSyntheticReference"
	case SourceFile:
		return "SourceFile"
	case Bundle:
		return "Bundle"
	case UnparsedSource:
		return "UnparsedSource"
	case InputFiles:
		return "InputFiles"
	case JSDocTypeExpression:
		return "JSDocTypeExpression"
	case JSDocNameReference:
		return "JSDocNameReference"
	case JSDocMemberName:
		return "JSDocMemberName"
	case JSDocAllType:
		return "JSDocAllType"
	case JSDocUnknownType:
		return "JSDocUnknownType"
	case JSDocNullableType:
		return "JSDocNullableType"
	case JSDocNonNullableType:
		return "JSDocNonNullableType"
	case JSDocOptionalType:
		return "JSDocOptionalType"
	case JSDocFunctionType:
		return "JSDocFunctionType"
	case JSDocVariadicType:
		return "JSDocVariadicType"
	case JSDocNamepathType:
		return "JSDocNamepathType"
	case JSDocComment:
		return "JSDocComment"
	case JSDocText:
		return "JSDocText"
	case JSDocTypeLiteral:
		return "JSDocTypeLiteral"
	case JSDocSignature:
		return "JSDocSignature"
	case JSDocLink:
		return "JSDocLink"
	case JSDocLinkCode:
		return "JSDocLinkCode"
	case JSDocLinkPlain:
		return "JSDocLinkPlain"
	case JSDocTag:
		return "JSDocTag"
	case JSDocAugmentsTag:
		return "JSDocAugmentsTag"
	case JSDocImplementsTag:
		return "JSDocImplementsTag"
	case JSDocAuthorTag:
		return "JSDocAuthorTag"
	case JSDocDeprecatedTag:
		return "JSDocDeprecatedTag"
	case JSDocClassTag:
		return "JSDocClassTag"
	case JSDocPublicTag:
		return "JSDocPublicTag"
	case JSDocPrivateTag:
		return "JSDocPrivateTag"
	case JSDocProtectedTag:
		return "JSDocProtectedTag"
	case JSDocReadonlyTag:
		return "JSDocReadonlyTag"
	case JSDocOverrideTag:
		return "JSDocOverrideTag"
	case JSDocCallbackTag:
		return "JSDocCallbackTag"
	case JSDocEnumTag:
		return "JSDocEnumTag"
	case JSDocParameterTag:
		return "JSDocParameterTag"
	case JSDocReturnTag:
		return "JSDocReturnTag"
	case JSDocThisTag:
		return "JSDocThisTag"
	case JSDocTypeTag:
		return "JSDocTypeTag"
	case JSDocTemplateTag:
		return "JSDocTemplateTag"
	case JSDocTypedefTag:
		return "JSDocTypedefTag"
	case JSDocSeeTag:
		return "JSDocSeeTag"
	case JSDocPropertyTag:
		return "JSDocPropertyTag"
	case SyntaxList:
		return "SyntaxList"
	case NotEmittedStatement:
		return "NotEmittedStatement"
	case PartiallyEmittedExpression:
		return "PartiallyEmittedExpression"
	case CommaListExpression:
		return "CommaListExpression"
	case MergeDeclarationMarker:
		return "MergeDeclarationMarker"
	case EndOfDeclarationMarker:
		return "EndOfDeclarationMarker"
	case SyntheticReferenceExpression:
		return "SyntheticReferenceExpression"
	case Count:
		return "Count"
	default:
		return "<unknown>" 
	}
}